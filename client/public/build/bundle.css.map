{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../App.svelte",
    "../../../RegisterTimer.svelte",
    "../../../Timer.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { onMount } from 'svelte';\n\timport Timer from './Timer.svelte';\n\timport RegisterTimer from './RegisterTimer.svelte';\n\n\texport let timers;\n\tlet id = 0;\n\tlet userLocation;\n\tlet userLocationSet = false;\n\n\tconst genId = () => {\n\t\tid = id + 1;\n\t\treturn id;\n\t}\n\n\tconst getPosition = (locator) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlocator.getCurrentPosition(resolve, reject);\n\t\t});\n\t}\n\n\tconst setLocation = async () => {\n\t\tconst geo = navigator.geolocation;\n\t\tif(!geo) {\n\t\t\tconsole.log('Be nice and accept.');\n\t\t} else {\n\t\t\tuserLocation = (await getPosition(geo)).coords;\n\t\t}\n\t}\n\n\tconst addTimer = (event) => {\n\t\tconst newTimer = { \n\t\t\tid: genId(), \n\t\t\tsecondsRemaining: toSecondsRounded(calculateCookingTime(event.detail))\n\t\t};\n\t\ttimers = [...timers, newTimer];\n\t};\n\n\tconst toSecondsRounded = (minutes) => {\n\t\tconst asString = Math.round( ((minutes * 60) * 100) / 100).toFixed(2);\n\t\treturn parseFloat(asString);\n\t}\n\n\tconst calculateCookingTime = (eggData) => {\n\t\tconst coeff = 0.15 * ((eggData.size / Math.PI) ** 2);\n\t\tconst toLn = (2 * (eggData.waterTemp - eggData.initialTemp) / (eggData.waterTemp - eggData.targetYolkTemp));\n\t\treturn coeff * Math.log(toLn);\n\t}\n</script>\n\n<style>\n\tmain {\n\t\twidth: 50%;\n\t\tmargin: auto;\n\t}\n\n\tmain h1 {\n\t\tmargin-left: 30%;\n\t}\n\n\tul {\n\t\tlist-style-type: none;\n\t\twidth: 100%;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\n\t.content {\n\t\twidth: 70%;\n\t}\n\n</style>\n\n<main>\n\t<h1>Egg</h1>\n\t{#if !userLocationSet}\n\t\t<p>This app works best with geolocation enabled. Would you like to enable this now?</p>\n\t\t<button on:click={() => { userLocationSet = true; setLocation(); } }>Yes please!</button>\n\t{:else}\n\t\t<div class=\"content\">\n\t\t\t<RegisterTimer on:add={addTimer} userlocation={userLocation} />\n\t\t\t<ul>\n\t\t\t{#each timers as timer (timer.id)}\n\t\t\t\t<Timer bind:secondsRemaining={timer.secondsRemaining} />\n\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t{/if}\n</main>",
    "<script>\n  import { createEventDispatcher, onMount } from 'svelte';\n\n  export let userlocation;\n\n  const dispatch = createEventDispatcher();\n\n  const temperatureOptions = [\n    { type: \"Fridge\", temperature: 4 },\n    { type: \"Room\", temperature: 20 }\n  ]\n\n  const boilOptions = [\n    { type: \"Soft Boiled\", temperature: 65 },\n    { type: \"Medium Boiled\", temperature: 73 },\n    { type: \"Hard Boiled\", temperature: 85 }\n  ]\n\n  let egg = {\n    size: 15,\n    initialTemp: 4,\n    waterTemp: 100,\n    targetYolkTemp: 65,\n  };\n\n  let eggOptions = [{ type: \"Loading...\", temperature: 65 }];\n\n  //TODO: Fetch correct regional data depending on user's current latitude and longitude\n  const setEggOptions = async () => {\n    const response = await (await fetch('http://localhost:8080/api/regions')).json();\n    return response.data[0].eggs;\n  }\n\n  const calculateBoilingPointFromElevation = (elevation) => {\n    return 100 - ((elevation / 150) * 0.5);\n  }\n\n  onMount(async () => {\n    eggOptions = await setEggOptions();\n    const elevation = await (await fetch(`http://localhost:8080/api/elevations/${userlocation.latitude}/${userlocation.longitude}`)).json();\n    egg.waterTemp = calculateBoilingPointFromElevation( elevation.data.elevation );\n    console.log('Water temp set to', egg.waterTemp, 'for elevation of', elevation.data.elevation);\n  });\n\n  const add = () => {\n    dispatch('add', egg);\n  };\n\n</script> \n\n<style>\n  section {\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: column;\n    border: 0.5px solid #5C3A89;\n    background-color: #F3E97C;\n    padding-left: 20px;\n    width: 100%;\n  }\n\n  h3 {\n    margin-bottom: 25px;\n  }\n\n  form {\n    display: flex;\n    width: 90%;\n    flex-direction: column;\n  }\n\n  form > * {\n    margin-bottom: 8px;\n  }\n\n  form > button {\n    margin-top: 10px;\n    margin-bottom: 20px;\n    width: 100%;\n  }\n\n  label {\n    display: flex;\n    flex-direction: row;\n    text-align: left;\n    font-size: 15px;\n  }\n\n  select {\n    height: 20px;\n    flex: 0 0 200px;\n    margin-left: 10px;\n  }\n</style>\n\n<section>\n  <h3>Register new timer</h3>\n  <form>\n    <div>\n      <label for=\"size\">Size:\n        <select name=\"size\" bind:value={egg.size}>\n          {#each eggOptions as eggOption}\n          <option value=\"{eggOption.size}\">\n            {eggOption.name}\n          </option>\n          {/each}\n        </select>\n      </label>\n    </div>\n    <div>\n      <label for=\"initialtemp\">From:\n        <select name=\"initialtemp\" bind:value={egg.initialTemp}>\n          {#each temperatureOptions as tmpOption}\n          <option value=\"{tmpOption.temperature}\">\n            {tmpOption.type}\n          </option>\n          {/each}\n        </select>\n      </label>\n    </div>\n    <div>\n      <label for=\"boil-target\">I want:\n        <select name=\"boil-target\" bind:value={egg.targetYolkTemp}>\n          {#each boilOptions as boilOption}\n          <option value=\"{boilOption.temperature}\">\n            {boilOption.type}\n          </option>\n          {/each}\n        </select>\n      </label>\n    </div>\n    <button on:click|preventDefault={add}>Click to add</button>\n  </form>\n</section>\n\n\n",
    "<script>\n  import { onMount } from \"svelte\";\n\n  export let secondsRemaining;\n  let active = true;\n  let intervalID;\n\n  $: minutes = Math.floor(secondsRemaining / 60);\n  $: seconds = Math.floor(secondsRemaining - minutes * 60).toString().padStart(2, '0');\n\n  const updateTimer = () => {\n    if (secondsRemaining === 1){\n      clearInterval(intervalID);\n      active = false;\n    }\n    secondsRemaining -= 1;\n  }\n\n  onMount(() => {\n    intervalID = setInterval(() => {\n      updateTimer();\n    }, 1000)\n  });\n</script>\n\n<style>\n\n  article {\n    display: inline-block;\n    width: 100%;\n    margin-top: 20px;\n    padding-left: 20px;\n  }\n\n  .timer {\n    background-color: #FFF7A7;\n    border: 0.5px solid #5C3A89;\n    color: black;\n  }\n\n  .active {\n    background-color: #DD534F;\n    color: white;\n  }\n\n  .ticktock {\n    color: orange;\n  }\n</style>\n\n<article class:timer=\"{active === true}\" class:active=\"{active === false}\">\n  {#if active === true}\n    <h4>Your egg is cooking...</h4>\n    <p>Remaining: <span class=\"ticktock\">{minutes}:{seconds}</span></p>\n  {:else}\n    <p>Shit! Time to get your eggs!<span class=\"ticktock\">{minutes}:{seconds}</span></p>\n  {/if}\n</article>\n\n"
  ],
  "names": [],
  "mappings": "AAmDC,IAAI,4BAAC,CAAC,AACL,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,AACb,CAAC,AAED,kBAAI,CAAC,EAAE,cAAC,CAAC,AACR,WAAW,CAAE,GAAG,AACjB,CAAC,AAED,EAAE,4BAAC,CAAC,AACH,eAAe,CAAE,IAAI,CACrB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACX,CAAC,AAED,QAAQ,4BAAC,CAAC,AACT,KAAK,CAAE,GAAG,AACX,CAAC;AClBA,OAAO,4BAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAC3B,gBAAgB,CAAE,OAAO,CACzB,YAAY,CAAE,IAAI,CAClB,KAAK,CAAE,IAAI,AACb,CAAC,AAED,EAAE,4BAAC,CAAC,AACF,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,IAAI,4BAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,GAAG,CACV,cAAc,CAAE,MAAM,AACxB,CAAC,AAED,kBAAI,CAAG,cAAE,CAAC,AACR,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,kBAAI,CAAG,MAAM,cAAC,CAAC,AACb,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,KAAK,CAAE,IAAI,AACb,CAAC,AAED,KAAK,4BAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,MAAM,4BAAC,CAAC,AACN,MAAM,CAAE,IAAI,CACZ,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CACf,WAAW,CAAE,IAAI,AACnB,CAAC;ACjED,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,IAAI,CAChB,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,gBAAgB,CAAE,OAAO,CACzB,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAC3B,KAAK,CAAE,KAAK,AACd,CAAC,AAED,OAAO,eAAC,CAAC,AACP,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KAAK,AACd,CAAC,AAED,SAAS,eAAC,CAAC,AACT,KAAK,CAAE,MAAM,AACf,CAAC"
}